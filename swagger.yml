swagger: '2.0'
info:
  title: Screenly API
  description: Screenly API for external use
  version: v3
host: api.screenlyapp.com
schemes:
  - https
basePath: /api/v3
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
    description: >-
      Bearer authentication is an HTTP authentication scheme that involves
      security tokens called bearer tokens. The bearer token is a cryptic
      string, generated by the server in response to a login request. The client
      must send this token in the Authorization header when making requests to
      protected resources: `Authorization: Token <token>`.<br><a
      href="#tag/tokens">Click here</a> to get your bearer token.
security:
  - Bearer: []
paths:
  /assets/:
    get:
      operationId: assets_list
      summary: Get Asset List
      description: >-
        Get a list of assets. Assets are the content that can be scheduled on
        screens, such as images, video and web pages.
      parameters: []
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Asset'
          examples:
            application/json:
              - id: 01FJXRHS3MNQXNXPNMMPPGTEST
                url: /api/v3/assets/01FJXRHS3MNQXNXPNMMPPGTEST/
                type: web
                title: 'https://www.screenly.io/'
                duration: 10
                asset_url: 'https://www.screenly.io/'
                md5: skip_md5
                source_md5: null
                source_size: null
                finalized: true
                width: 0
                height: 0
                disable_verification: false
                headers:
                  User-Agent: >-
                    Mozilla/5.0 (X11; Linux i686; rv:2.0.1) Gecko/20100101
                    Firefox/4.0.1
                  Cookie: sessionid=5d5ceccb6d387e196d578c6x;
                meta_data: {}
                folder_name: Websites for advertising
                status: finished
        '401':
          description: You provided invalid credentials.
      tags:
        - assets
      x-code-samples:
        - lang: curl
          source: |
            curl -X GET \
            -H 'Authorization: Token {token}' \
            -H 'Content-Type: application/json' \
            'https://api.screenlyapp.com/api/v3/assets/'
        - lang: python
          source: |
            import requests
            headers = {
                "Authorization": "Token {token}",
                "Content-Type": "application/json"
            }
            response = requests.request(
                method='GET',
                url='https://api.screenlyapp.com/api/v3/assets/',
                headers=headers
            )
            print(response.json())
    post:
      operationId: assets_create
      summary: Create Asset
      description: >-
        Define a new asset by providing a URL to a web page, an image file or a
        video file. Assets are the content that can be scheduled on screens,
        such as images, video and web pages.
      parameters:
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/AssetCreate'
      responses:
        '201':
          description: ''
          schema:
            $ref: '#/definitions/Asset'
          examples:
            application/json:
              id: 01FJXRHS3MNQXNXPNMMPPGTEST
              url: /api/v3/assets/01FJXRHS3MNQXNXPNMMPPGTEST/
              type: web
              title: 'https://www.screenly.io/'
              duration: 10
              asset_url: 'https://www.screenly.io/'
              md5: skip_md5
              source_md5: null
              source_size: null
              finalized: true
              width: 0
              height: 0
              disable_verification: false
              headers:
                User-Agent: >-
                  Mozilla/5.0 (X11; Linux i686; rv:2.0.1) Gecko/20100101
                  Firefox/4.0.1
                Cookie: sessionid=5d5ceccb6d387e196d578c6x;
              meta_data: {}
              folder_name: Websites for advertising
              status: finished
        '400':
          description: You sent a malformed or bad request.
        '401':
          description: You provided invalid credentials.
      tags:
        - assets
      x-code-samples:
        - lang: curl
          source: >
            curl -X POST \

            -H 'Authorization: Token {token}' \

            -H 'Content-Type: application/json' \

            -d '{"source_url": "https://www.screenly.io/", "folder_name":
            "Websites for advertising", "title": "https://www.screenly.io/",
            "disable_verification": false, "js_injection": "console.log('Hello
            World!');"}' \

            'https://api.screenlyapp.com/api/v3/assets/'
        - lang: python
          source: |
            import requests
            headers = {
                "Authorization": "Token {token}",
                "Content-Type": "application/json"
            }
            response = requests.request(
                method='POST',
                url='https://api.screenlyapp.com/api/v3/assets/',
                json={'source_url': 'https://www.screenly.io/', 'folder_name': 'Websites for advertising', 'title': 'https://www.screenly.io/', 'disable_verification': False, 'js_injection': "console.log('Hello World!');"},
                headers=headers
            )
            print(response.json())
    parameters: []
  '/assets/{id}/':
    get:
      operationId: assets_read
      summary: Get Asset
      description: >-
        Get the details of a specific asset. Assets are the content that can be
        scheduled on screens, such as images, video and web pages.
      parameters: []
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Asset'
          examples:
            application/json:
              id: 01FJXRHS3MNQXNXPNMMPPGTEST
              url: /api/v3/assets/01FJXRHS3MNQXNXPNMMPPGTEST/
              type: web
              title: 'https://www.screenly.io/'
              duration: 10
              asset_url: 'https://www.screenly.io/'
              md5: skip_md5
              source_md5: null
              source_size: null
              finalized: true
              width: 0
              height: 0
              disable_verification: false
              headers:
                User-Agent: >-
                  Mozilla/5.0 (X11; Linux i686; rv:2.0.1) Gecko/20100101
                  Firefox/4.0.1
                Cookie: sessionid=5d5ceccb6d387e196d578c6x;
              meta_data: {}
              folder_name: Websites for advertising
              status: finished
        '401':
          description: You provided invalid credentials.
      tags:
        - assets
      x-code-samples:
        - lang: curl
          source: |
            curl -X GET \
            -H 'Authorization: Token {token}' \
            -H 'Content-Type: application/json' \
            'https://api.screenlyapp.com/api/v3/assets/{id}/'
        - lang: python
          source: |
            import requests
            headers = {
                "Authorization": "Token {token}",
                "Content-Type": "application/json"
            }
            response = requests.request(
                method='GET',
                url='https://api.screenlyapp.com/api/v3/assets/{id}/',
                headers=headers
            )
            print(response.json())
    put:
      operationId: assets_update
      summary: Update Asset
      description: >-
        Change an asset. Assets are the content that can be scheduled on
        screens, such as images, video and web pages.
      parameters:
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/AssetUpdate'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Asset'
          examples:
            application/json:
              id: 01FJXRHS3MNQXNXPNMMPPGTEST
              url: /api/v3/assets/01FJXRHS3MNQXNXPNMMPPGTEST/
              type: web
              title: 'https://www.screenly.io/'
              duration: 10
              asset_url: 'https://www.screenly.io/'
              md5: skip_md5
              source_md5: null
              source_size: null
              finalized: true
              width: 0
              height: 0
              disable_verification: false
              headers:
                User-Agent: >-
                  Mozilla/5.0 (X11; Linux i686; rv:2.0.1) Gecko/20100101
                  Firefox/4.0.1
                Cookie: sessionid=5d5ceccb6d387e196d578c6x;
              meta_data: {}
              folder_name: Websites for advertising
              status: finished
        '400':
          description: You sent a malformed or bad request.
        '401':
          description: You provided invalid credentials.
      tags:
        - assets
      x-code-samples:
        - lang: curl
          source: >
            curl -X PUT \

            -H 'Authorization: Token {token}' \

            -H 'Content-Type: application/json' \

            -d '{"id": "01FJXRHS3MNQXNXPNMMPPGTEST", "url":
            "/api/v3/assets/01FJXRHS3MNQXNXPNMMPPGTEST/", "type": "web",
            "title": "https://www.screenly.io/", "duration": 10.0, "asset_url":
            "https://www.screenly.io/", "md5": "skip_md5", "source_md5": null,
            "source_size": null, "finalized": true, "width": 0, "height": 0,
            "disable_verification": false, "headers": {"User-Agent":
            "Mozilla/5.0 (X11; Linux i686; rv:2.0.1) Gecko/20100101
            Firefox/4.0.1", "Cookie": "sessionid=5d5ceccb6d387e196d578c6x;"},
            "meta_data": {}, "folder_name": "Websites for advertising",
            "status": "finished", "js_injection": "console.log('Hello
            World!');"}' \

            'https://api.screenlyapp.com/api/v3/assets/{id}/'
        - lang: python
          source: |
            import requests
            headers = {
                "Authorization": "Token {token}",
                "Content-Type": "application/json"
            }
            response = requests.request(
                method='PUT',
                url='https://api.screenlyapp.com/api/v3/assets/{id}/',
                json={'id': '01FJXRHS3MNQXNXPNMMPPGTEST', 'url': '/api/v3/assets/01FJXRHS3MNQXNXPNMMPPGTEST/', 'type': 'web', 'title': 'https://www.screenly.io/', 'duration': 10.0, 'asset_url': 'https://www.screenly.io/', 'md5': 'skip_md5', 'source_md5': None, 'source_size': None, 'finalized': True, 'width': 0, 'height': 0, 'disable_verification': False, 'headers': {'User-Agent': 'Mozilla/5.0 (X11; Linux i686; rv:2.0.1) Gecko/20100101 Firefox/4.0.1', 'Cookie': 'sessionid=5d5ceccb6d387e196d578c6x;'}, 'meta_data': {}, 'folder_name': 'Websites for advertising', 'status': 'finished', 'js_injection': "console.log('Hello World!');"},
                headers=headers
            )
            print(response.json())
    patch:
      operationId: assets_partial_update
      summary: Update Asset Partially
      description: >-
        Change specific fields of an asset. Assets are the content that can be
        scheduled on screens, such as images, video and web pages.
      parameters:
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/AssetUpdate'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Asset'
          examples:
            application/json:
              id: 01FJXRHS3MNQXNXPNMMPPGTEST
              url: /api/v3/assets/01FJXRHS3MNQXNXPNMMPPGTEST/
              type: web
              title: 'https://www.screenly.io/'
              duration: 10
              asset_url: 'https://www.screenly.io/'
              md5: skip_md5
              source_md5: null
              source_size: null
              finalized: true
              width: 0
              height: 0
              disable_verification: false
              headers:
                User-Agent: >-
                  Mozilla/5.0 (X11; Linux i686; rv:2.0.1) Gecko/20100101
                  Firefox/4.0.1
                Cookie: sessionid=5d5ceccb6d387e196d578c6x;
              meta_data: {}
              folder_name: Websites for advertising
              status: finished
        '400':
          description: You sent a malformed or bad request.
        '401':
          description: You provided invalid credentials.
      tags:
        - assets
      x-code-samples:
        - lang: curl
          source: >
            curl -X PATCH \

            -H 'Authorization: Token {token}' \

            -H 'Content-Type: application/json' \

            -d '{"folder_name": "Websites for advertising", "title":
            "https://www.screenly.io/", "js_injection": "console.log('Hello
            World!');"}' \

            'https://api.screenlyapp.com/api/v3/assets/{id}/'
        - lang: python
          source: |
            import requests
            headers = {
                "Authorization": "Token {token}",
                "Content-Type": "application/json"
            }
            response = requests.request(
                method='PATCH',
                url='https://api.screenlyapp.com/api/v3/assets/{id}/',
                json={'folder_name': 'Websites for advertising', 'title': 'https://www.screenly.io/', 'js_injection': "console.log('Hello World!');"},
                headers=headers
            )
            print(response.json())
    delete:
      operationId: assets_delete
      summary: Delete Asset
      description: >-
        Delete a specific asset. Assets are the content that can be scheduled on
        screens, such as images, video and web pages.
      parameters: []
      responses:
        '200':
          description: ''
        '401':
          description: You provided invalid credentials.
      tags:
        - assets
      x-code-samples:
        - lang: curl
          source: |
            curl -X DELETE \
            -H 'Authorization: Token {token}' \
            -H 'Content-Type: application/json' \
            'https://api.screenlyapp.com/api/v3/assets/{id}/'
        - lang: python
          source: |
            import requests
            headers = {
                "Authorization": "Token {token}",
                "Content-Type": "application/json"
            }
            response = requests.request(
                method='DELETE',
                url='https://api.screenlyapp.com/api/v3/assets/{id}/',
                headers=headers
            )
            print(response.json())
    parameters:
      - name: id
        in: path
        required: true
        type: string
  /groups/:
    get:
      operationId: groups_list
      summary: Get Group List
      description: >-
        Get a list of groups. Groups are used to associate screens and can be
        used to schedule playlists on them.
      parameters: []
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/GroupRead'
          examples:
            application/json:
              - url: /api/v3/groups/all-screens/
                screens:
                  - coords:
                      - 48.852253
                      - 2.351276
                    id: 597077272aeda0002a02b5bc
                    name: Notre Dame
                  - coords:
                      - 48.858544
                      - 2.294205
                    id: 5f436b3ace8f09002d758fcc
                    name: La Tour Eiffel
                  - coords:
                      - 48.873759
                      - 2.294945
                    id: 597077272aeda0002a02b5cd
                    name: Arc de Triomphe
                  - coords:
                      - 59.329504
                      - 18.069532
                    id: 5f436b3ace8f09002d758fcd
                    name: Stockholm Opera
                  - coords:
                      - 0
                      - 0
                    id: 5f436b3ace8f09002d758fd8
                    name: New screen
                id: all-screens
                name: All Screens
              - url: /api/v3/groups/5f436b3b019b03002a358efd/
                screens:
                  - coords:
                      - 0
                      - 0
                    id: 5f436b3ace8f09002d758fd8
                    name: New screen
                id: 5f436b3b019b03002a358efd
                name: Group 1
              - url: /api/v3/groups/5f436b3b019b030028358efd/
                screens:
                  - coords:
                      - 0
                      - 0
                    id: 5f436b3ace8f09002d758fd8
                    name: New screen
                id: 5f436b3b019b030028358efd
                name: Group 2
              - url: /api/v3/groups/5f436b3ace8f09002d758fd0/
                screens:
                  - coords:
                      - 48.852253
                      - 2.351276
                    id: 597077272aeda0002a02b5bc
                    name: Notre Dame
                  - coords:
                      - 48.858544
                      - 2.294205
                    id: 5f436b3ace8f09002d758fcc
                    name: La Tour Eiffel
                id: 5f436b3ace8f09002d758fd0
                name: Group A
              - url: /api/v3/groups/5f436b3ace8f09002d758fd1/
                screens:
                  - coords:
                      - 48.873759
                      - 2.294945
                    id: 597077272aeda0002a02b5cd
                    name: Arc de Triomphe
                  - coords:
                      - 59.329504
                      - 18.069532
                    id: 5f436b3ace8f09002d758fcd
                    name: Stockholm Opera
                id: 5f436b3ace8f09002d758fd1
                name: Group B
              - url: /api/v3/groups/5f436b3ace8f09002d758fce/
                screens:
                  - coords:
                      - 48.852253
                      - 2.351276
                    id: 597077272aeda0002a02b5bc
                    name: Notre Dame
                  - coords:
                      - 48.873759
                      - 2.294945
                    id: 597077272aeda0002a02b5cd
                    name: Arc de Triomphe
                  - coords:
                      - 48.858544
                      - 2.294205
                    id: 5f436b3ace8f09002d758fcc
                    name: La Tour Eiffel
                id: 5f436b3ace8f09002d758fce
                name: Paris
              - url: /api/v3/groups/5f436b3ace8f09002d758fd2/
                screens:
                  - coords:
                      - 59.329504
                      - 18.069532
                    id: 5f436b3ace8f09002d758fcd
                    name: Stockholm Opera
                id: 5f436b3ace8f09002d758fd2
                name: 'Really long group name, just to be sure'
              - url: /api/v3/groups/5f436b3ace8f09002d758fcf/
                screens:
                  - coords:
                      - 59.329504
                      - 18.069532
                    id: 5f436b3ace8f09002d758fcd
                    name: Stockholm Opera
                id: 5f436b3ace8f09002d758fcf
                name: Stockholm
              - url: /api/v3/groups/5f436b3ace8f09002d758fd3/
                screens:
                  - coords:
                      - 48.873759
                      - 2.294945
                    id: 597077272aeda0002a02b5cd
                    name: Arc de Triomphe
                  - coords:
                      - 59.329504
                      - 18.069532
                    id: 5f436b3ace8f09002d758fcd
                    name: Stockholm Opera
                id: 5f436b3ace8f09002d758fd3
                name: ✂«☕➔➹➼☧
        '401':
          description: You provided invalid credentials.
      tags:
        - groups
      x-code-samples:
        - lang: curl
          source: |
            curl -X GET \
            -H 'Authorization: Token {token}' \
            -H 'Content-Type: application/json' \
            'https://api.screenlyapp.com/api/v3/groups/'
        - lang: python
          source: |
            import requests
            headers = {
                "Authorization": "Token {token}",
                "Content-Type": "application/json"
            }
            response = requests.request(
                method='GET',
                url='https://api.screenlyapp.com/api/v3/groups/',
                headers=headers
            )
            print(response.json())
    post:
      operationId: groups_create
      summary: Create Group
      description: >-
        Define a new group. Groups are used to associate screens and can be used
        to schedule playlists on them.
      parameters:
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/GroupWrite'
      responses:
        '201':
          description: ''
          schema:
            $ref: '#/definitions/GroupRead'
          examples:
            application/json:
              url: /api/v3/groups/5f4291c94e3278002862e5ff/
              screens:
                - coords:
                    - 0
                    - 0
                  id: 5f4291c885addd002d0200b6
                  name: New screen
              id: 5f4291c94e3278002862e5ff
              name: Group of fast food screens
        '400':
          description: You sent a malformed or bad request.
        '401':
          description: You provided invalid credentials.
      tags:
        - groups
      x-code-samples:
        - lang: curl
          source: >
            curl -X POST \

            -H 'Authorization: Token {token}' \

            -H 'Content-Type: application/json' \

            -d '{"name": "Group of fast food screens", "screens": [{"id":
            "5f4291c94e3278002862e5ff"}]}' \

            'https://api.screenlyapp.com/api/v3/groups/'
        - lang: python
          source: |
            import requests
            headers = {
                "Authorization": "Token {token}",
                "Content-Type": "application/json"
            }
            response = requests.request(
                method='POST',
                url='https://api.screenlyapp.com/api/v3/groups/',
                json={'name': 'Group of fast food screens', 'screens': [{'id': '5f4291c94e3278002862e5ff'}]},
                headers=headers
            )
            print(response.json())
    parameters: []
  '/groups/{id}/':
    get:
      operationId: groups_read
      summary: Get Group
      description: >-
        Get the details of a specific group. Groups are used to associate
        screens and can be used to schedule playlists on them.
      parameters: []
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/GroupRead'
          examples:
            application/json:
              url: /api/v3/groups/5f4291c94e3278002862e5ff/
              screens:
                - coords:
                    - 0
                    - 0
                  id: 5f4291c885addd002d0200b6
                  name: New screen
              id: 5f4291c94e3278002862e5ff
              name: Group of fast food screens
        '401':
          description: You provided invalid credentials.
      tags:
        - groups
      x-code-samples:
        - lang: curl
          source: |
            curl -X GET \
            -H 'Authorization: Token {token}' \
            -H 'Content-Type: application/json' \
            'https://api.screenlyapp.com/api/v3/groups/{id}/'
        - lang: python
          source: |
            import requests
            headers = {
                "Authorization": "Token {token}",
                "Content-Type": "application/json"
            }
            response = requests.request(
                method='GET',
                url='https://api.screenlyapp.com/api/v3/groups/{id}/',
                headers=headers
            )
            print(response.json())
    put:
      operationId: groups_update
      summary: Update Group
      description: >-
        Change a group. Groups are used to associate screens and can be used to
        schedule playlists on them.
      parameters:
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/GroupWrite'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/GroupRead'
          examples:
            application/json:
              url: /api/v3/groups/5f4291c94e3278002862e5ff/
              screens: []
              id: 5f4291c94e3278002862e5ff
              name: Empty group
        '400':
          description: You sent a malformed or bad request.
        '401':
          description: You provided invalid credentials.
      tags:
        - groups
      x-code-samples:
        - lang: curl
          source: |
            curl -X PUT \
            -H 'Authorization: Token {token}' \
            -H 'Content-Type: application/json' \
            -d '{"screens": [], "name": "Empty group"}' \
            'https://api.screenlyapp.com/api/v3/groups/{id}/'
        - lang: python
          source: |
            import requests
            headers = {
                "Authorization": "Token {token}",
                "Content-Type": "application/json"
            }
            response = requests.request(
                method='PUT',
                url='https://api.screenlyapp.com/api/v3/groups/{id}/',
                json={'screens': [], 'name': 'Empty group'},
                headers=headers
            )
            print(response.json())
    patch:
      operationId: groups_partial_update
      summary: Update Group Partially
      description: >-
        Change specific fields of a group. Groups are used to associate screens
        and can be used to schedule playlists on them.
      parameters:
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/GroupWrite'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/GroupRead'
          examples:
            application/json:
              url: /api/v3/groups/5f4291c94e3278002862e5ff/
              screens:
                - coords:
                    - 0
                    - 0
                  id: 5f4291c885addd002d0200b6
                  name: New screen
              id: 5f4291c94e3278002862e5ff
              name: Group of some screens
        '400':
          description: You sent a malformed or bad request.
        '401':
          description: You provided invalid credentials.
      tags:
        - groups
      x-code-samples:
        - lang: curl
          source: >
            curl -X PATCH \

            -H 'Authorization: Token {token}' \

            -H 'Content-Type: application/json' \

            -d '{"screens": [{"coords": [0.0, 0.0], "id":
            "5f4291c885addd002d0200b6", "name": "New screen"}], "name": "Group
            of some screens"}' \

            'https://api.screenlyapp.com/api/v3/groups/{id}/'
        - lang: python
          source: |
            import requests
            headers = {
                "Authorization": "Token {token}",
                "Content-Type": "application/json"
            }
            response = requests.request(
                method='PATCH',
                url='https://api.screenlyapp.com/api/v3/groups/{id}/',
                json={'screens': [{'coords': [0.0, 0.0], 'id': '5f4291c885addd002d0200b6', 'name': 'New screen'}], 'name': 'Group of some screens'},
                headers=headers
            )
            print(response.json())
    delete:
      operationId: groups_delete
      summary: Delete Group
      description: >-
        Delete a specific group. Groups are used to associate screens and can be
        used to schedule playlists on them.
      parameters: []
      responses:
        '200':
          description: ''
        '401':
          description: You provided invalid credentials.
      tags:
        - groups
      x-code-samples:
        - lang: curl
          source: |
            curl -X DELETE \
            -H 'Authorization: Token {token}' \
            -H 'Content-Type: application/json' \
            'https://api.screenlyapp.com/api/v3/groups/{id}/'
        - lang: python
          source: |
            import requests
            headers = {
                "Authorization": "Token {token}",
                "Content-Type": "application/json"
            }
            response = requests.request(
                method='DELETE',
                url='https://api.screenlyapp.com/api/v3/groups/{id}/',
                headers=headers
            )
            print(response.json())
    parameters:
      - name: id
        in: path
        required: true
        type: string
  /playlists/:
    get:
      operationId: playlists_list
      summary: Get Playlist List
      description: >-
        Get a list of playlists. Playlists describe what assets to display and
        when. Once a playlist has been defined it can be scheduled on groups of
        screens.
      parameters: []
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/PlaylistListRead'
          examples:
            application/json:
              - is_enabled: true
                priority: 0
                predicate: TRUE AND ($DATE >= 0) AND ($DATE <= 4102444800000)
                groups:
                  - url: /api/v3/groups/all_screens/
                    id: all_screens
                    name: All Screens
                title: Play on All Screens
                url: /api/v3/playlists/all-screens/
                duration: 0
                id: all-screens
              - is_enabled: true
                predicate: 'TRUE'
                title: Test playlist 1
                url: /api/v3/playlists/5f3fcec66db0cd002837c5ca/
                priority: 0
                groups: []
                duration: 0
                id: 5f3fcec66db0cd002837c5ca
              - is_enabled: true
                predicate: 'TRUE'
                title: Test playlist 2
                url: /api/v3/playlists/5f3fcec66db0cd002837c5ca/
                priority: 0
                groups: []
                duration: 0
                id: 5f3fcec66db0cd002837c5ca
        '401':
          description: You provided invalid credentials.
      tags:
        - playlists
      x-code-samples:
        - lang: curl
          source: |
            curl -X GET \
            -H 'Authorization: Token {token}' \
            -H 'Content-Type: application/json' \
            'https://api.screenlyapp.com/api/v3/playlists/'
        - lang: python
          source: |
            import requests
            headers = {
                "Authorization": "Token {token}",
                "Content-Type": "application/json"
            }
            response = requests.request(
                method='GET',
                url='https://api.screenlyapp.com/api/v3/playlists/',
                headers=headers
            )
            print(response.json())
    post:
      operationId: playlists_create
      summary: Create Playlist
      description: >-
        Define a new playlist. Playlists describe what assets to display and
        when. Once a playlist has been defined it can be scheduled on groups of
        screens.
      parameters:
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/PlaylistWrite'
      responses:
        '201':
          description: ''
          schema:
            $ref: '#/definitions/PlaylistRead'
          examples:
            application/json:
              is_enabled: true
              predicate: 'TRUE'
              assets: []
              title: Test playlist
              url: /api/v3/playlists/5f3fcec66db0cd002837c5ca/
              priority: 0
              groups: []
              duration: 0
              id: 5f3fcec66db0cd002837c5ca
        '400':
          description: You sent a malformed or bad request.
        '401':
          description: You provided invalid credentials.
      tags:
        - playlists
      x-code-samples:
        - lang: curl
          source: |
            curl -X POST \
            -H 'Authorization: Token {token}' \
            -H 'Content-Type: application/json' \
            -d '{"title": "Test playlist"}' \
            'https://api.screenlyapp.com/api/v3/playlists/'
        - lang: python
          source: |
            import requests
            headers = {
                "Authorization": "Token {token}",
                "Content-Type": "application/json"
            }
            response = requests.request(
                method='POST',
                url='https://api.screenlyapp.com/api/v3/playlists/',
                json={'title': 'Test playlist'},
                headers=headers
            )
            print(response.json())
    parameters: []
  '/playlists/{id}/':
    get:
      operationId: playlists_read
      summary: Get Playlist
      description: >-
        Get the details of a specific playlist. Playlists describe what assets
        to display and when. Once a playlist has been defined it can be
        scheduled on groups of screens.
      parameters: []
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/PlaylistRead'
          examples:
            application/json:
              is_enabled: true
              predicate: 'TRUE'
              assets: []
              title: Test playlist
              url: /api/v3/playlists/5f3fcec66db0cd002837c5ca/
              priority: 0
              groups: []
              duration: 0
              id: 5f3fcec66db0cd002837c5ca
        '401':
          description: You provided invalid credentials.
      tags:
        - playlists
      x-code-samples:
        - lang: curl
          source: |
            curl -X GET \
            -H 'Authorization: Token {token}' \
            -H 'Content-Type: application/json' \
            'https://api.screenlyapp.com/api/v3/playlists/{id}/'
        - lang: python
          source: |
            import requests
            headers = {
                "Authorization": "Token {token}",
                "Content-Type": "application/json"
            }
            response = requests.request(
                method='GET',
                url='https://api.screenlyapp.com/api/v3/playlists/{id}/',
                headers=headers
            )
            print(response.json())
    put:
      operationId: playlists_update
      summary: Update Playlist
      description: >-
        Change a playlist. Playlists describe what assets to display and when.
        Once a playlist has been defined it can be scheduled on groups of
        screens.
      parameters:
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/PlaylistWrite'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/PlaylistRead'
          examples:
            application/json:
              is_enabled: true
              predicate: 'TRUE'
              assets: []
              title: New playlist name
              url: /api/v3/playlists/5f3fcec66db0cd002837c5ca/
              priority: 0
              groups: []
              duration: 0
              id: 5f3fcec66db0cd002837c5ca
        '400':
          description: You sent a malformed or bad request.
        '401':
          description: You provided invalid credentials.
      tags:
        - playlists
      x-code-samples:
        - lang: curl
          source: |
            curl -X PUT \
            -H 'Authorization: Token {token}' \
            -H 'Content-Type: application/json' \
            -d '{"title": "Test playlist"}' \
            'https://api.screenlyapp.com/api/v3/playlists/{id}/'
        - lang: python
          source: |
            import requests
            headers = {
                "Authorization": "Token {token}",
                "Content-Type": "application/json"
            }
            response = requests.request(
                method='PUT',
                url='https://api.screenlyapp.com/api/v3/playlists/{id}/',
                json={'title': 'Test playlist'},
                headers=headers
            )
            print(response.json())
    patch:
      operationId: playlists_partial_update
      summary: Update Playlist Partially
      description: >-
        Change specific fields of a playlist. Playlists describe what assets to
        display and when. Once a playlist has been defined it can be scheduled
        on groups of screens.
      parameters:
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/PlaylistWrite'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/PlaylistRead'
          examples:
            application/json:
              is_enabled: true
              predicate: 'TRUE'
              assets: []
              title: New playlist name
              url: /api/v3/playlists/5f3fcec66db0cd002837c5ca/
              priority: 0
              groups: []
              duration: 0
              id: 5f3fcec66db0cd002837c5ca
        '401':
          description: You provided invalid credentials.
      tags:
        - playlists
      x-code-samples:
        - lang: curl
          source: |
            curl -X PATCH \
            -H 'Authorization: Token {token}' \
            -H 'Content-Type: application/json' \
            -d '{"title": "New playlist name"}' \
            'https://api.screenlyapp.com/api/v3/playlists/{id}/'
        - lang: python
          source: |
            import requests
            headers = {
                "Authorization": "Token {token}",
                "Content-Type": "application/json"
            }
            response = requests.request(
                method='PATCH',
                url='https://api.screenlyapp.com/api/v3/playlists/{id}/',
                json={'title': 'New playlist name'},
                headers=headers
            )
            print(response.json())
    delete:
      operationId: playlists_delete
      summary: Delete Playlist
      description: >-
        Delete a specific playlist. Playlists describe what assets to display
        and when. Once a playlist has been defined it can be scheduled on groups
        of screens.
      parameters: []
      responses:
        '200':
          description: ''
        '401':
          description: You provided invalid credentials.
      tags:
        - playlists
      x-code-samples:
        - lang: curl
          source: |
            curl -X DELETE \
            -H 'Authorization: Token {token}' \
            -H 'Content-Type: application/json' \
            'https://api.screenlyapp.com/api/v3/playlists/{id}/'
        - lang: python
          source: |
            import requests
            headers = {
                "Authorization": "Token {token}",
                "Content-Type": "application/json"
            }
            response = requests.request(
                method='DELETE',
                url='https://api.screenlyapp.com/api/v3/playlists/{id}/',
                headers=headers
            )
            print(response.json())
    parameters:
      - name: id
        in: path
        required: true
        type: string
  /screens/:
    get:
      operationId: screens_list
      summary: Get Screen List
      description: >-
        Get a list of screens. Screens are a representation of the physical
        device running Screenly software.
      parameters: []
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/ScreenEndpoint'
          examples:
            application/json:
              - id: 01DQ0KJT300007KJAK074WGTBD
                in_sync: false
                status: Offline
                type: hardware
                coords:
                  - 0
                  - 0
                is_enabled: true
                last_ping: '2020-05-21T19:58:52'
                groups:
                  - id: all_screens
                    url: /api/v3/groups/all_screens/
                    name: All Screens
                name: My Screen
                last_screenshot: last_screenshot.png
              - id: 01DQ0KJT300007KJAK074WGTBE
                in_sync: false
                last_ping: null
                status: Offline
                coords:
                  - 0
                  - 0
                type: hardware
                is_enabled: true
                groups:
                  - id: all_screens
                    url: /api/v3/groups/all_screens/
                    name: All Screens
                name: My Screen
                last_screenshot: last_screenshot.png
        '401':
          description: You provided invalid credentials.
      tags:
        - screens
      x-code-samples:
        - lang: curl
          source: |
            curl -X GET \
            -H 'Authorization: Token {token}' \
            -H 'Content-Type: application/json' \
            'https://api.screenlyapp.com/api/v3/screens/'
        - lang: python
          source: |
            import requests
            headers = {
                "Authorization": "Token {token}",
                "Content-Type": "application/json"
            }
            response = requests.request(
                method='GET',
                url='https://api.screenlyapp.com/api/v3/screens/',
                headers=headers
            )
            print(response.json())
    post:
      operationId: screens_create
      summary: Create Screen
      description: >-
        Create new screen. Screens are a representation of the physical device
        running Screenly software.
      parameters:
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/ScreenCreate'
      responses:
        '201':
          description: ''
          schema:
            $ref: '#/definitions/ScreenDetailed'
          examples:
            application/json:
              id: 01ANCN7K4000005MYH0C84HXXD
              in_sync: false
              last_ping: null
              status: Offline
              type: hardware
              is_enabled: true
              coords:
                - -33.925278
                - 18.423889
              groups:
                - id: all_screens
                  url: /api/v3/groups/all_screens/
                  name: All Screens
                - id: 01ANCPFHF000005MYH0E5BR0DN
                  url: /api/v3/groups/01ANCPFHF000005MYH0E5BR0DN/
                  name: Beta Group
                - id: 01ANCPFGF000005MYH0E5BR0DM
                  url: /api/v3/groups/01ANCPFGF000005MYH0E5BR0DM/
                  name: Bronze Group
              name: New Screen
              last_screenshot: 'http://localhost'
              hostname: bronze0.screenly.local
              last_ip: N/A
              local_ip: ''
              mac: ''
              last_screenshot_time: null
              location: Cape Town
              timezone: UTC
              uptime: N/A
              hardware_version: Screenly Player
              software_version: ''
              load_avg: N/A
              ws_open: false
              team: 01ANCN7K4000005MYH0C84HXXB
        '400':
          description: You sent a malformed or bad request.
        '401':
          description: You provided invalid credentials.
      tags:
        - screens
      x-code-samples:
        - lang: curl
          source: |
            curl -X POST \
            -H 'Authorization: Token {token}' \
            -H 'Content-Type: application/json' \
            -d '{"pin": "012345", "name": "My Screen"}' \
            'https://api.screenlyapp.com/api/v3/screens/'
        - lang: python
          source: |
            import requests
            headers = {
                "Authorization": "Token {token}",
                "Content-Type": "application/json"
            }
            response = requests.request(
                method='POST',
                url='https://api.screenlyapp.com/api/v3/screens/',
                json={'pin': '012345', 'name': 'My Screen'},
                headers=headers
            )
            print(response.json())
    parameters: []
  /screens/upload/:
    post:
      operationId: screens_upload
      description: ''
      parameters:
        - name: pin
          in: formData
          description: Pin code created with registrations endpoint
          required: true
          type: string
          minLength: 1
        - name: name
          in: formData
          description: Name of the new screen
          required: false
          type: string
          minLength: 1
      responses:
        '201':
          description: ''
          schema:
            $ref: '#/definitions/ScreenCreate'
      consumes:
        - multipart/form-data
      tags:
        - screens
    parameters: []
  '/screens/{id}/':
    get:
      operationId: screens_read
      summary: Get Screen
      description: >-
        Get the details of a specific screen. Screens are a representation of
        the physical device running Screenly software.
      parameters: []
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/ScreenDetailed'
          examples:
            application/json:
              id: 01ANCN7K4000005MYH0C84HXXD
              in_sync: false
              last_ping: null
              status: Offline
              type: hardware
              is_enabled: true
              coords:
                - -33.925278
                - 18.423889
              groups:
                - id: all_screens
                  url: /api/v3/groups/all_screens/
                  name: All Screens
                - id: 01ANCPFHF000005MYH0E5BR0DN
                  url: /api/v3/groups/01ANCPFHF000005MYH0E5BR0DN/
                  name: Beta Group
                - id: 01ANCPFGF000005MYH0E5BR0DM
                  url: /api/v3/groups/01ANCPFGF000005MYH0E5BR0DM/
                  name: Bronze Group
              name: New Screen
              last_screenshot: 'http://localhost'
              hostname: bronze0.screenly.local
              last_ip: N/A
              local_ip: ''
              mac: ''
              last_screenshot_time: null
              location: Cape Town
              timezone: UTC
              uptime: N/A
              hardware_version: Screenly Player
              software_version: ''
              load_avg: N/A
              ws_open: false
              team: 01ANCN7K4000005MYH0C84HXXB
        '401':
          description: You provided invalid credentials.
      tags:
        - screens
      x-code-samples:
        - lang: curl
          source: |
            curl -X GET \
            -H 'Authorization: Token {token}' \
            -H 'Content-Type: application/json' \
            'https://api.screenlyapp.com/api/v3/screens/{id}/'
        - lang: python
          source: |
            import requests
            headers = {
                "Authorization": "Token {token}",
                "Content-Type": "application/json"
            }
            response = requests.request(
                method='GET',
                url='https://api.screenlyapp.com/api/v3/screens/{id}/',
                headers=headers
            )
            print(response.json())
    put:
      operationId: screens_update
      summary: Update Screen
      description: >-
        Change a screen. Screens are a representation of the physical device
        running Screenly software.
      parameters:
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/ScreenEndpoint'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/ScreenDetailed'
          examples:
            application/json:
              in_sync: false
              last_ping: ''
              status: Offline
              type: hardware
              enabled: true
              coords:
                - -33.925278
                - 18.423889
              groups:
                - _id: all-screens
                - _id: 01ANCPFHF000005MYH0E5BR0DN
                - _id: 01ANCPFGF000005MYH0E5BR0DM
              name: New Screen1
              last_screenshot: 'http://localhost'
              hostname: bronze0.screenly.local
              last_ip: N/A
              local_ip: ''
              mac: ''
              last_screenshot_time: ''
              location: Cape Town
              timezone: UTC
              uptime: N/A
              hardware_version: Screenly Player
              software_version: ''
              load_avg: N/A
              ws_open: false
              org: 01ANCN7K4000005MYH0C84HXXB
        '400':
          description: You sent a malformed or bad request.
        '401':
          description: You provided invalid credentials.
      tags:
        - screens
      x-code-samples:
        - lang: curl
          source: >
            curl -X PUT \

            -H 'Authorization: Token {token}' \

            -H 'Content-Type: application/json' \

            -d '{"id": "01ANCN7K4000005MYH0C84HXXD", "in_sync": false,
            "last_ping": "", "status": "Offline", "type": "hardware",
            "is_enabled": true, "coords": [-33.925278, 18.423889], "groups":
            [{"id": "all_screens", "url": "/api/v3/groups/all_screens/", "name":
            "All Screens"}, {"id": "01ANCPFHF000005MYH0E5BR0DN", "url":
            "/api/v3/groups/01ANCPFHF000005MYH0E5BR0DN/", "name": "Beta Group"},
            {"id": "01ANCPFGF000005MYH0E5BR0DM", "url":
            "/api/v3/groups/01ANCPFGF000005MYH0E5BR0DM/", "name": "Bronze
            Group"}], "name": "New Screen", "last_screenshot":
            "http://localhost", "hostname": "bronze0.screenly.local", "last_ip":
            "N/A", "local_ip": "", "mac": "", "last_screenshot_time": "",
            "location": "Cape Town", "timezone": "UTC", "uptime": "N/A",
            "hardware_version": "Screenly Player", "software_version": "",
            "load_avg": "N/A", "ws_open": false, "team":
            "01ANCN7K4000005MYH0C84HXXB"}' \

            'https://api.screenlyapp.com/api/v3/screens/{id}/'
        - lang: python
          source: |
            import requests
            headers = {
                "Authorization": "Token {token}",
                "Content-Type": "application/json"
            }
            response = requests.request(
                method='PUT',
                url='https://api.screenlyapp.com/api/v3/screens/{id}/',
                json={'id': '01ANCN7K4000005MYH0C84HXXD', 'in_sync': False, 'last_ping': '', 'status': 'Offline', 'type': 'hardware', 'is_enabled': True, 'coords': [-33.925278, 18.423889], 'groups': [{'id': 'all_screens', 'url': '/api/v3/groups/all_screens/', 'name': 'All Screens'}, {'id': '01ANCPFHF000005MYH0E5BR0DN', 'url': '/api/v3/groups/01ANCPFHF000005MYH0E5BR0DN/', 'name': 'Beta Group'}, {'id': '01ANCPFGF000005MYH0E5BR0DM', 'url': '/api/v3/groups/01ANCPFGF000005MYH0E5BR0DM/', 'name': 'Bronze Group'}], 'name': 'New Screen', 'last_screenshot': 'http://localhost', 'hostname': 'bronze0.screenly.local', 'last_ip': 'N/A', 'local_ip': '', 'mac': '', 'last_screenshot_time': '', 'location': 'Cape Town', 'timezone': 'UTC', 'uptime': 'N/A', 'hardware_version': 'Screenly Player', 'software_version': '', 'load_avg': 'N/A', 'ws_open': False, 'team': '01ANCN7K4000005MYH0C84HXXB'},
                headers=headers
            )
            print(response.json())
    delete:
      operationId: screens_delete
      summary: Delete Screen
      description: >-
        Delete a specific screen. Screens are a representation of the physical
        device running Screenly software.
      parameters: []
      responses:
        '200':
          description: ''
        '401':
          description: You provided invalid credentials.
      tags:
        - screens
      x-code-samples:
        - lang: curl
          source: |
            curl -X DELETE \
            -H 'Authorization: Token {token}' \
            -H 'Content-Type: application/json' \
            'https://api.screenlyapp.com/api/v3/screens/{id}/'
        - lang: python
          source: |
            import requests
            headers = {
                "Authorization": "Token {token}",
                "Content-Type": "application/json"
            }
            response = requests.request(
                method='DELETE',
                url='https://api.screenlyapp.com/api/v3/screens/{id}/',
                headers=headers
            )
            print(response.json())
    parameters:
      - name: id
        in: path
        required: true
        type: string
definitions:
  Asset:
    type: object
    properties:
      id:
        title: Id
        description: Unique ID of the asset
        type: string
        readOnly: true
        minLength: 1
      url:
        title: Url
        description: 'This is API URL of this asset in the following form: /v3/assets/<id>'
        type: string
        readOnly: true
      type:
        title: Type
        description: 'Type of the asset. Web, video and images are supported.'
        type: string
        enum:
          - image
          - video
          - appweb
          - web
        readOnly: true
        x-nullable: true
      title:
        title: Title
        description: Title of the asset.
        type: string
      duration:
        title: Duration
        description: >-
          Duration of the asset. For videos it is equal to the duration of the
          whole video. For web and images this field is unused - duration of the
          playback is controlled by the playlist.
        type: number
        readOnly: true
        x-nullable: true
      asset_url:
        title: Asset url
        type: string
        readOnly: true
        minLength: 1
      md5:
        title: Md5
        description: MD5 checksum of the asset.
        type: string
        readOnly: true
        minLength: 1
      source_md5:
        title: Source md5
        description: MD5 checksum of the original source file.
        type: string
        readOnly: true
        x-nullable: true
      source_size:
        title: Source size
        description: Size of the original source file in bytes.
        type: integer
        readOnly: true
      source_url:
        title: Source url
        description: URL of the original source file.
        type: string
        readOnly: true
        minLength: 1
        x-nullable: true
      finalized:
        title: Finalized
        description: Indicates whether processing of the asset is finalized or not.
        type: boolean
        readOnly: true
      width:
        title: Width
        description: Width of the asset.
        type: integer
        readOnly: true
      height:
        title: Height
        description: Height of the asset.
        type: integer
        readOnly: true
      disable_verification:
        title: Disable verification
        description: Disables HTTPS verification when set to true.
        type: boolean
      folder_name:
        title: Folder name
        description: Name of the folder the asset is located in.
        type: string
      headers:
        title: Headers
        description: HTTP headers for web assets.
        type: object
        additionalProperties:
          type: string
          x-nullable: true
      meta_data:
        title: Meta data
        description: |

          A key-value user-defined store for an asset.
          {"meta_1": "meta_1 data", "meta_2": "meta_2 data"}
        type: object
        additionalProperties:
          type: string
          x-nullable: true
      status:
        title: Status
        description: Indicates the current status of the asset processing
        type: string
        enum:
          - none
          - error
          - finished
          - processing
        readOnly: true
  AssetCreate:
    required:
      - source_url
    type: object
    properties:
      id:
        title: Id
        description: Unique ID of the asset
        type: string
        readOnly: true
        minLength: 1
      url:
        title: Url
        description: 'This is API URL of this asset in the following form: /v3/assets/<id>'
        type: string
        readOnly: true
      type:
        title: Type
        description: 'Type of the asset. Web, video and images are supported.'
        type: string
        enum:
          - image
          - video
          - appweb
          - web
        readOnly: true
        x-nullable: true
      title:
        title: Title
        description: Title of the asset.
        type: string
      duration:
        title: Duration
        description: >-
          Duration of the asset. For videos it is equal to the duration of the
          whole video. For web and images this field is unused - duration of the
          playback is controlled by the playlist.
        type: number
        readOnly: true
        x-nullable: true
      asset_url:
        title: Asset url
        type: string
        readOnly: true
        minLength: 1
      md5:
        title: Md5
        description: MD5 checksum of the asset.
        type: string
        readOnly: true
        minLength: 1
      source_md5:
        title: Source md5
        description: MD5 checksum of the original source file.
        type: string
        x-nullable: true
      source_size:
        title: Source size
        description: Size of the original source file in bytes.
        type: integer
        x-nullable: true
      source_url:
        title: Source url
        description: URL of the original source file.
        type: string
        minLength: 1
      finalized:
        title: Finalized
        description: Indicates whether processing of the asset is finalized or not.
        type: boolean
        readOnly: true
      width:
        title: Width
        description: Width of the asset.
        type: integer
        readOnly: true
      height:
        title: Height
        description: Height of the asset.
        type: integer
        readOnly: true
      disable_verification:
        title: Disable verification
        description: Disables HTTPS verification when set to true.
        type: boolean
      folder_name:
        title: Folder name
        description: Name of the folder the asset is located in.
        type: string
      headers:
        title: Headers
        description: HTTP headers for web assets.
        type: object
        additionalProperties:
          type: string
          x-nullable: true
      meta_data:
        title: Meta data
        description: |

          A key-value user-defined store for an asset.
          {"meta_1": "meta_1 data", "meta_2": "meta_2 data"}
        type: object
        additionalProperties:
          type: string
          x-nullable: true
      status:
        title: Status
        description: Indicates the current status of the asset processing
        type: string
        enum:
          - none
          - error
          - finished
          - processing
        readOnly: true
      js_injection:
        title: Js injection
        description: >-
          Custom js code, running when asset is loaded. See examples on:
          https://github.com/Screenly/playground/tree/master/javascript-injectors/
        type: string
        minLength: 1
  AssetUpdate:
    type: object
    properties:
      id:
        title: Id
        description: Unique ID of the asset
        type: string
        readOnly: true
        minLength: 1
      url:
        title: Url
        description: 'This is API URL of this asset in the following form: /v3/assets/<id>'
        type: string
        readOnly: true
      type:
        title: Type
        description: 'Type of the asset. Web, video and images are supported.'
        type: string
        enum:
          - image
          - video
          - appweb
          - web
        readOnly: true
        x-nullable: true
      title:
        title: Title
        description: Title of the asset.
        type: string
      duration:
        title: Duration
        description: >-
          Duration of the asset. For videos it is equal to the duration of the
          whole video. For web and images this field is unused - duration of the
          playback is controlled by the playlist.
        type: number
        readOnly: true
        x-nullable: true
      asset_url:
        title: Asset url
        type: string
        readOnly: true
        minLength: 1
      md5:
        title: Md5
        description: MD5 checksum of the asset.
        type: string
        readOnly: true
        minLength: 1
      source_md5:
        title: Source md5
        description: MD5 checksum of the original source file.
        type: string
        readOnly: true
        x-nullable: true
      source_size:
        title: Source size
        description: Size of the original source file in bytes.
        type: integer
        readOnly: true
      source_url:
        title: Source url
        description: URL of the original source file.
        type: string
        readOnly: true
        minLength: 1
        x-nullable: true
      finalized:
        title: Finalized
        description: Indicates whether processing of the asset is finalized or not.
        type: boolean
        readOnly: true
      width:
        title: Width
        description: Width of the asset.
        type: integer
        readOnly: true
      height:
        title: Height
        description: Height of the asset.
        type: integer
        readOnly: true
      disable_verification:
        title: Disable verification
        description: Disables HTTPS verification when set to true.
        type: boolean
      folder_name:
        title: Folder name
        description: Name of the folder the asset is located in.
        type: string
      headers:
        title: Headers
        description: HTTP headers for web assets.
        type: object
        additionalProperties:
          type: string
          x-nullable: true
      meta_data:
        title: Meta data
        description: |

          A key-value user-defined store for an asset.
          {"meta_1": "meta_1 data", "meta_2": "meta_2 data"}
        type: object
        additionalProperties:
          type: string
          x-nullable: true
      status:
        title: Status
        description: Indicates the current status of the asset processing
        type: string
        enum:
          - none
          - error
          - finished
          - processing
        readOnly: true
      js_injection:
        title: Js injection
        description: >-
          Custom js code, running when asset is loaded. See examples on:
          https://github.com/Screenly/playground/tree/master/javascript-injectors/
        type: string
        minLength: 1
  Screen:
    required:
      - id
    type: object
    properties:
      id:
        title: Id
        type: string
        minLength: 1
      name:
        title: Name
        description: Name of the screen.
        type: string
        readOnly: true
        minLength: 1
      coords:
        title: Coords
        description: Screen coordinates.
        type: object
        readOnly: true
  GroupRead:
    required:
      - name
      - screens
    type: object
    properties:
      id:
        title: Id
        type: string
        readOnly: true
        minLength: 1
      url:
        title: Url
        type: string
        readOnly: true
      name:
        title: Name
        type: string
        minLength: 1
      screens:
        type: array
        items:
          $ref: '#/definitions/Screen'
  GroupWrite:
    type: object
    properties:
      id:
        title: Id
        type: string
        readOnly: true
        minLength: 1
      name:
        title: Name
        description: Group name.
        type: string
        default: New Group
        minLength: 1
      url:
        title: Url
        type: string
        readOnly: true
      screens:
        title: Screens
        description: |

          Screens in this group
          in form [
            {"id": "screen1_id"},
            {"id": "screen2_id"},
          ]
        type: object
        default: {}
  Group:
    required:
      - id
    type: object
    properties:
      id:
        title: Id
        type: string
        minLength: 1
      url:
        title: Url
        type: string
        readOnly: true
      name:
        title: Name
        type: string
        readOnly: true
        minLength: 1
  PlaylistListRead:
    required:
      - predicate
      - title
      - is_enabled
    type: object
    properties:
      id:
        title: Id
        type: string
        readOnly: true
        minLength: 1
      groups:
        type: array
        items:
          $ref: '#/definitions/Group'
      predicate:
        title: Predicate
        type: string
        minLength: 1
      duration:
        title: Duration
        type: number
        readOnly: true
      title:
        title: Title
        type: string
        minLength: 1
      url:
        title: Url
        type: string
        readOnly: true
      is_enabled:
        title: Is enabled
        type: boolean
      priority:
        title: Priority
        type: integer
        default: 0
        maximum: 1
        minimum: 0
  PlaylistWrite:
    type: object
    properties:
      id:
        title: Id
        description: Identifier of the playlist
        type: string
        readOnly: true
        minLength: 1
      url:
        title: Url
        type: string
        readOnly: true
      assets:
        title: Assets
        description: |

          Assets attached to this playlist
          in form
          [
           {"id": "asset_id", "duration": 5},
           {"id": "asset2_id"}
          ]
          Duration is optional and set to 10 seconds by default.
        type: object
        default: {}
      duration:
        title: Duration
        description: >-
          Duration of the playlist in seconds. It is equal to the sum of the
          duration of assets inside.
        type: number
        readOnly: true
      groups:
        title: Groups
        description: |

          Screen groups
          to which this playlist is attached
          in the following form:
          [
           {"id": "group_id"},
           {"id": "group2_id"}
          ]
        type: object
        default: {}
      predicate:
        title: Predicate
        description: Predicate in the screenly pro format. Defaults to 'TRUE'
        type: string
        default: 'TRUE'
        minLength: 1
      title:
        title: Title
        description: Title of the playlist
        type: string
        default: New
        minLength: 1
      is_enabled:
        title: Is enabled
        description: Set to enable/disable playlist
        type: boolean
      priority:
        title: Priority
        description: >-
          Playlists with a priority of 1 suppress any scheduled playlists with a
          lower priority.
        type: integer
        maximum: 1
        minimum: 0
  PlaylistItem:
    description: Assets attached to this playlist
    required:
      - id
    type: object
    properties:
      id:
        title: Id
        type: string
        minLength: 1
      duration:
        title: Duration
        type: number
        default: 10
        minimum: 0
  PlaylistRead:
    required:
      - predicate
      - title
      - is_enabled
    type: object
    properties:
      id:
        title: Id
        description: Unique ID of the playlist
        type: string
        readOnly: true
        minLength: 1
      assets:
        description: Assets attached to this playlist
        type: array
        items:
          $ref: '#/definitions/PlaylistItem'
      groups:
        description: Screen groups to which this playlist is attached
        type: array
        items:
          $ref: '#/definitions/Group'
      predicate:
        title: Predicate
        description: Predicate in the screenly pro format
        type: string
        minLength: 1
      duration:
        title: Duration
        description: >-
          Duration of the playlist in seconds. It is equal to the sum of the
          duration of assets inside.
        type: number
        readOnly: true
      title:
        title: Title
        description: Title of the playlist
        type: string
        minLength: 1
      url:
        title: Url
        type: string
        readOnly: true
      is_enabled:
        title: Is enabled
        description: Set to enable/disable playlist
        type: boolean
      priority:
        title: Priority
        description: >-
          Playlists with a priority of 1 suppress any scheduled playlists with a
          lower priority.
        type: integer
        default: 0
        maximum: 1
        minimum: 0
  ScreenEndpoint:
    required:
      - in_sync
      - status
      - type
      - is_enabled
      - name
    type: object
    properties:
      id:
        title: Id
        description: Unique ID of the screen
        type: string
        readOnly: true
        minLength: 1
      in_sync:
        title: In sync
        description: Shows if the screen is in sync
        type: boolean
      last_ping:
        title: Last ping
        description: The last time screen has pinged the server
        type: string
        x-nullable: true
      status:
        title: Status
        description: Current status of the screen. ONLINE/OUT OF SYNC/OFFLINE/DISABLED
        type: string
        minLength: 1
      type:
        title: Type
        description: Type of the screen. HARDWARE/VIRTUAL
        type: string
        minLength: 1
      is_enabled:
        title: Is enabled
        description: Set to enable/disable screen
        type: boolean
      coords:
        description: Lat/Long tuple of device geolocation.
        type: array
        items:
          type: number
      groups:
        description: Groups to which this screen is attached
        type: array
        items:
          $ref: '#/definitions/Group'
      name:
        title: Name
        description: Name of the screen
        type: string
        minLength: 1
      last_screenshot:
        title: Last screenshot
        description: The last screenshot captured from the device
        type: string
  ScreenCreate:
    required:
      - pin
    type: object
    properties:
      pin:
        title: Pin
        description: Pin code created with registrations endpoint
        type: string
        minLength: 1
      name:
        title: Name
        description: Name of the new screen
        type: string
        minLength: 1
  ScreenDetailed:
    required:
      - in_sync
      - status
      - type
      - is_enabled
      - name
    type: object
    properties:
      id:
        title: Id
        description: Unique ID of the screen
        type: string
        readOnly: true
        minLength: 1
      in_sync:
        title: In sync
        description: Shows if the screen is in sync
        type: boolean
      last_ping:
        title: Last ping
        description: The last time screen has pinged the server
        type: string
        x-nullable: true
      status:
        title: Status
        description: Current status of the screen. ONLINE/OUT OF SYNC/OFFLINE/DISABLED
        type: string
        minLength: 1
      type:
        title: Type
        description: Type of the screen. HARDWARE/VIRTUAL
        type: string
        minLength: 1
      is_enabled:
        title: Is enabled
        description: Set to enable/disable screen
        type: boolean
      coords:
        description: Lat/Long tuple of device geolocation.
        type: array
        items:
          type: number
      groups:
        description: Groups to which this screen is attached
        type: array
        items:
          $ref: '#/definitions/Group'
      name:
        title: Name
        description: Name of the screen
        type: string
        minLength: 1
      last_screenshot:
        title: Last screenshot
        description: The last screenshot captured from the device
        type: string
      hostname:
        title: Hostname
        description: 'Unique hostname of the device, assigned by screenly'
        type: string
        minLength: 1
      last_ip:
        title: Last ip
        description: IP used used by the device
        type: string
      local_ip:
        title: Local ip
        description: Device IP in the local network
        type: string
      mac:
        title: Mac
        description: MAC address of the device
        type: string
      last_screenshot_time:
        title: Last screenshot time
        description: Time when last screenshot was taken
        type: string
        x-nullable: true
      location:
        title: Location
        description: Geographic location auto-detected for device
        type: string
      team:
        title: Team
        description: Team ID of the device
        type: string
        minLength: 1
      timezone:
        title: Timezone
        description: Timezone detected for the device
        type: string
      uptime:
        title: Uptime
        description: Uptime of the device
        type: string
      hardware_version:
        title: Hardware version
        description: >-
          Hardware version of the device. Currently only Raspberry Pi versions
          are detected
        type: string
      software_version:
        title: Software version
        description: Software version of the device
        type: string
      load_avg:
        title: Load avg
        description: Average load of the device
        type: string
      ws_open:
        title: Ws open
        description: Shows if device has a websocket connection
        type: boolean
