// Code generated by go-swagger; DO NOT EDIT.

package screens

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewScreensUploadParams creates a new ScreensUploadParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewScreensUploadParams() *ScreensUploadParams {
	return &ScreensUploadParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewScreensUploadParamsWithTimeout creates a new ScreensUploadParams object
// with the ability to set a timeout on a request.
func NewScreensUploadParamsWithTimeout(timeout time.Duration) *ScreensUploadParams {
	return &ScreensUploadParams{
		timeout: timeout,
	}
}

// NewScreensUploadParamsWithContext creates a new ScreensUploadParams object
// with the ability to set a context for a request.
func NewScreensUploadParamsWithContext(ctx context.Context) *ScreensUploadParams {
	return &ScreensUploadParams{
		Context: ctx,
	}
}

// NewScreensUploadParamsWithHTTPClient creates a new ScreensUploadParams object
// with the ability to set a custom HTTPClient for a request.
func NewScreensUploadParamsWithHTTPClient(client *http.Client) *ScreensUploadParams {
	return &ScreensUploadParams{
		HTTPClient: client,
	}
}

/* ScreensUploadParams contains all the parameters to send to the API endpoint
   for the screens upload operation.

   Typically these are written to a http.Request.
*/
type ScreensUploadParams struct {

	/* Name.

	   Name of the new screen
	*/
	Name *string

	/* Pin.

	   Pin code created with registrations endpoint
	*/
	Pin string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the screens upload params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ScreensUploadParams) WithDefaults() *ScreensUploadParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the screens upload params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ScreensUploadParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the screens upload params
func (o *ScreensUploadParams) WithTimeout(timeout time.Duration) *ScreensUploadParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the screens upload params
func (o *ScreensUploadParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the screens upload params
func (o *ScreensUploadParams) WithContext(ctx context.Context) *ScreensUploadParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the screens upload params
func (o *ScreensUploadParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the screens upload params
func (o *ScreensUploadParams) WithHTTPClient(client *http.Client) *ScreensUploadParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the screens upload params
func (o *ScreensUploadParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithName adds the name to the screens upload params
func (o *ScreensUploadParams) WithName(name *string) *ScreensUploadParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the screens upload params
func (o *ScreensUploadParams) SetName(name *string) {
	o.Name = name
}

// WithPin adds the pin to the screens upload params
func (o *ScreensUploadParams) WithPin(pin string) *ScreensUploadParams {
	o.SetPin(pin)
	return o
}

// SetPin adds the pin to the screens upload params
func (o *ScreensUploadParams) SetPin(pin string) {
	o.Pin = pin
}

// WriteToRequest writes these params to a swagger request
func (o *ScreensUploadParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Name != nil {

		// form param name
		var frName string
		if o.Name != nil {
			frName = *o.Name
		}
		fName := frName
		if fName != "" {
			if err := r.SetFormParam("name", fName); err != nil {
				return err
			}
		}
	}

	// form param pin
	frPin := o.Pin
	fPin := frPin
	if fPin != "" {
		if err := r.SetFormParam("pin", fPin); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
