// Code generated by go-swagger; DO NOT EDIT.

package playlists

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new playlists API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for playlists API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	PlaylistsCreate(params *PlaylistsCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PlaylistsCreateCreated, error)

	PlaylistsDelete(params *PlaylistsDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PlaylistsDeleteOK, error)

	PlaylistsList(params *PlaylistsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PlaylistsListOK, error)

	PlaylistsPartialUpdate(params *PlaylistsPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PlaylistsPartialUpdateOK, error)

	PlaylistsRead(params *PlaylistsReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PlaylistsReadOK, error)

	PlaylistsUpdate(params *PlaylistsUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PlaylistsUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  PlaylistsCreate creates playlist

  Define a new playlist. Playlists describe what assets to display and when. Once a playlist has been defined it can be scheduled on groups of screens.
*/
func (a *Client) PlaylistsCreate(params *PlaylistsCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PlaylistsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPlaylistsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "playlists_create",
		Method:             "POST",
		PathPattern:        "/playlists/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PlaylistsCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PlaylistsCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for playlists_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PlaylistsDelete deletes playlist

  Delete a specific playlist. Playlists describe what assets to display and when. Once a playlist has been defined it can be scheduled on groups of screens.
*/
func (a *Client) PlaylistsDelete(params *PlaylistsDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PlaylistsDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPlaylistsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "playlists_delete",
		Method:             "DELETE",
		PathPattern:        "/playlists/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PlaylistsDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PlaylistsDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for playlists_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PlaylistsList gets playlist list

  Get a list of playlists. Playlists describe what assets to display and when. Once a playlist has been defined it can be scheduled on groups of screens.
*/
func (a *Client) PlaylistsList(params *PlaylistsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PlaylistsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPlaylistsListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "playlists_list",
		Method:             "GET",
		PathPattern:        "/playlists/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PlaylistsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PlaylistsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for playlists_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PlaylistsPartialUpdate updates playlist partially

  Change specific fields of a playlist. Playlists describe what assets to display and when. Once a playlist has been defined it can be scheduled on groups of screens.
*/
func (a *Client) PlaylistsPartialUpdate(params *PlaylistsPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PlaylistsPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPlaylistsPartialUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "playlists_partial_update",
		Method:             "PATCH",
		PathPattern:        "/playlists/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PlaylistsPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PlaylistsPartialUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for playlists_partial_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PlaylistsRead gets playlist

  Get the details of a specific playlist. Playlists describe what assets to display and when. Once a playlist has been defined it can be scheduled on groups of screens.
*/
func (a *Client) PlaylistsRead(params *PlaylistsReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PlaylistsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPlaylistsReadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "playlists_read",
		Method:             "GET",
		PathPattern:        "/playlists/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PlaylistsReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PlaylistsReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for playlists_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PlaylistsUpdate updates playlist

  Change a playlist. Playlists describe what assets to display and when. Once a playlist has been defined it can be scheduled on groups of screens.
*/
func (a *Client) PlaylistsUpdate(params *PlaylistsUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PlaylistsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPlaylistsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "playlists_update",
		Method:             "PUT",
		PathPattern:        "/playlists/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PlaylistsUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PlaylistsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for playlists_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
