// Code generated by go-swagger; DO NOT EDIT.

package groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new groups API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for groups API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GroupsCreate(params *GroupsCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GroupsCreateCreated, error)

	GroupsDelete(params *GroupsDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GroupsDeleteOK, error)

	GroupsList(params *GroupsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GroupsListOK, error)

	GroupsPartialUpdate(params *GroupsPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GroupsPartialUpdateOK, error)

	GroupsRead(params *GroupsReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GroupsReadOK, error)

	GroupsUpdate(params *GroupsUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GroupsUpdateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GroupsCreate creates group

  Define a new group. Groups are used to associate screens and can be used to schedule playlists on them.
*/
func (a *Client) GroupsCreate(params *GroupsCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GroupsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupsCreateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "groups_create",
		Method:             "POST",
		PathPattern:        "/groups/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GroupsCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GroupsCreateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for groups_create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GroupsDelete deletes group

  Delete a specific group. Groups are used to associate screens and can be used to schedule playlists on them.
*/
func (a *Client) GroupsDelete(params *GroupsDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GroupsDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupsDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "groups_delete",
		Method:             "DELETE",
		PathPattern:        "/groups/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GroupsDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GroupsDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for groups_delete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GroupsList gets group list

  Get a list of groups. Groups are used to associate screens and can be used to schedule playlists on them.
*/
func (a *Client) GroupsList(params *GroupsListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GroupsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupsListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "groups_list",
		Method:             "GET",
		PathPattern:        "/groups/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GroupsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GroupsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for groups_list: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GroupsPartialUpdate updates group partially

  Change specific fields of a group. Groups are used to associate screens and can be used to schedule playlists on them.
*/
func (a *Client) GroupsPartialUpdate(params *GroupsPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GroupsPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupsPartialUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "groups_partial_update",
		Method:             "PATCH",
		PathPattern:        "/groups/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GroupsPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GroupsPartialUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for groups_partial_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GroupsRead gets group

  Get the details of a specific group. Groups are used to associate screens and can be used to schedule playlists on them.
*/
func (a *Client) GroupsRead(params *GroupsReadParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GroupsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupsReadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "groups_read",
		Method:             "GET",
		PathPattern:        "/groups/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GroupsReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GroupsReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for groups_read: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GroupsUpdate updates group

  Change a group. Groups are used to associate screens and can be used to schedule playlists on them.
*/
func (a *Client) GroupsUpdate(params *GroupsUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GroupsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGroupsUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "groups_update",
		Method:             "PUT",
		PathPattern:        "/groups/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GroupsUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GroupsUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for groups_update: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
